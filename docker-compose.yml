version: "3"
services:
  frontend:
    image: secoda/on-premise-frontend:2024.4.1
    container_name: frontend
    # To use a custom certificate, uncomment the following lines and
    # replace the paths with the paths to your X509 certificate and
    # private key, in PEM format.
    # volumes:
    #   - ./on-premise.key:/app/certs/on-premise.key
    #   - ./on-premise.crt:/app/certs/on-premise.crt
    restart: always
    ports:
      - 443:443
      - 80:80
    environment:
      - PUBLIC_KEY
      - API_TLS_CONFIG_BASE64=
      - API_ENDPOINT=api
      - API_PORT=5007
      - API_PROTOCOL=http
    networks:
      - secodanet
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:5006/healthcheck/"]
      interval: 15s
      timeout: 15s
      retries: 5
      start_period: 30s
    depends_on:
      api:
        condition: service_healthy

  api:
    image: secoda/on-premise-api:2024.4.1
    container_name: api
    restart: always
    ports:
      - 5007:5007
    networks:
      - secodanet
    environment:
      - APISERVICE_SECRET
      - PUBLIC_KEY
      - PRIVATE_KEY
      - PRIVATE_BUCKET
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - APISERVICE_DATABASE_CONNECTION
      - REDIS_URL=redis://redis:6379
      - ES_HOST=http://elasticsearch
      - ES_USERNAME
      - ES_PASSWORD
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:5007/healthcheck/"]
      interval: 15s
      timeout: 15s
      retries: 10
      start_period: 180s
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    ulimits:
      core:
        hard: 0
        soft: 0

  redis:
    image: redis:6.2.14
    restart: always
    container_name: redis
    command: ["redis-server", "--appendonly", "yes"]
    hostname: redis
    networks:
      - secodanet
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  postgres:
    image: postgres:14.12
    restart: always
    ports:
      - 5432:5432
    container_name: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=secoda
      - POSTGRES_USER=secoda
      - POSTGRES_PASSWORD
    networks:
      - secodanet
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  elasticsearch:
    image: opensearchproject/opensearch:2.11.1
    restart: always
    container_name: elasticsearch
    hostname: elasticsearch
    volumes:
      - elasticsearch_data:/usr/share/opensearch/data
    environment:
      - plugins.security.disabled=true
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx4096m
      - DISABLE_INSTALL_DEMO_CONFIG=true
      - NETWORK_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - secodanet

networks:
  secodanet:

volumes:
  postgres_data:
    driver: local
  elasticsearch_data:
    driver: local
